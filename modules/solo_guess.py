# modules/solo_guess.py

import logging
import random
import asyncio

from modules.database import get_solo_level, set_solo_level
from aiogram.types import ReplyKeyboardRemove
from typing import Optional  # –¥–ª—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π
from aiogram import Router, types, F
from aiogram.enums import ParseMode
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import (
    InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
)
from aiogram.exceptions import TelegramBadRequest

from bot import bot
from config import SOLO_PLAYERS_JSON, BASE_DIR  # –ø—É—Ç–∏ –∫ –¥–∞–Ω–Ω—ã–º :contentReference[oaicite:0]{index=0}
from utils import load_json, is_match
from aiogram.types import FSInputFile
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
PHOTOS_DIR = BASE_DIR / "footphoto"
TOTAL_QUESTIONS_PER_LEVEL = 5
FUZZY_THRESHOLD = 75  # —Ç–æ—Ç –∂–µ –ø–æ—Ä–æ–≥, —á—Ç–æ –±—ã–ª –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ :contentReference[oaicite:1]{index=1}

router = Router()
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
try:
    SOLO_PLAYERS_DATA = load_json(SOLO_PLAYERS_JSON)
except Exception as e:
    SOLO_PLAYERS_DATA = {}
    logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {SOLO_PLAYERS_JSON}: {e}")

# –¢–µ–∫—Å—Ç—ã
CORRECT_ANSWER_PHRASES = [
    "‚úÖ –í —è–±–ª–æ—á–∫–æ! –≠—Ç–æ –æ–Ω.", "üéØ –¢–æ—á–Ω–æ –≤ —Ü–µ–ª—å!", "ü•≥ –ï—Å—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç! –ü—Ä–∞–≤–∏–ª—å–Ω–æ.",
    "üòé –£–∑–Ω–∞–ª, —Ö–æ—Ä–æ—à!", "üíØ –ò–¥–µ–∞–ª—å–Ω–æ!", "–¢–∞–∫ –∏ –µ—Å—Ç—å! üëç", "–ò–º–µ–Ω–Ω–æ –æ–Ω! –ö—Ä–∞—Å–∞–≤–∞!",
]
INCORRECT_ANSWER_PHRASES = [
    "‚ùå –≠—Ö, –º–∏–º–æ –∫–∞—Å—Å—ã.", "ü§î –ù–µ—Ç, —ç—Ç–æ –Ω–µ –æ–Ω.", "–ü–æ—á—Ç–∏, –Ω–æ –Ω–µ—Ç. üò¨",
    "–ù–µ —É–≥–∞–¥–∞–ª. –ü–æ–ø—Ä–æ–±—É–π –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!", "–£–≤—ã, –Ω–µ–≤–µ—Ä–Ω–æ. ü§∑‚Äç‚ôÇÔ∏è", "–î—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç, –±—Ä–æ.",
]
GIVE_UP_PHRASES = [
    "üè≥Ô∏è –û–∫–µ–π, —ç—Ç–æ—Ç —Ä–∞—É–Ω–¥ –ø—Ä–æ–ø—É—â–µ–Ω.", "–ü–æ–Ω—è–ª, —Å–¥–∞–µ—à—å—Å—è. –ò–¥–µ–º –¥–∞–ª—å—à–µ!",
    "–≠—Ç–æ—Ç –æ—Ä–µ—à–µ–∫ –æ–∫–∞–∑–∞–ª—Å—è –∫—Ä–µ–ø–∫–∏–º. –°–ª–µ–¥—É—é—â–∏–π!", "–ó–∞—Å—á–∏—Ç–∞–Ω–æ –∫–∞–∫ –ø—Ä–æ–ø—É—Å–∫. –ü–æ–≥–Ω–∞–ª–∏ –¥–∞–ª—å—à–µ!",
]
HINT_PHRASES = [
    "–î–µ—Ä–∂–∏ –Ω–∞–≤–æ–¥–∫—É: üïµÔ∏è‚Äç‚ôÇÔ∏è", "–í–æ—Ç —Ç–µ–±–µ –º–∞–ª–µ–Ω—å–∫–∏–π —Å–µ–∫—Ä–µ—Ç: üòâ",
    "–ú–æ–∂–µ—Ç, —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç? üëá", "–õ–æ–≤–∏ –ø–æ–¥—Å–∫–∞–∑–æ—á–∫—É: üí°", "–°–º–æ—Ç—Ä–∏, —á—Ç–æ –µ—Å—Ç—å: üëÄ",
]
QUESTION_PHRASES = [
    "–¢–∞–∫-—Å, –∫—Ç–æ –∂–µ —ç—Ç–æ—Ç –º–æ–¥–Ω–∏–∫? ü§î", "–ê —ç—Ç–æ–≥–æ —É–∑–Ω–∞–µ—à—å? üßê",
    "–ü–æ–¥–Ω–∞–ø—Ä—è–≥–∏ –ø–∞–º—è—Ç—å! –ö—Ç–æ –Ω–∞ —Ñ–æ—Ç–æ? üß†", "–°–ª–µ–¥—É—é—â–∏–π –Ω–∞ –æ—á–µ—Ä–µ–¥–∏! –¢–≤–æ—è –¥–æ–≥–∞–¥–∫–∞? üëá",
    "–≠—Ç–æ—Ç –ø–∞—Ä–µ–Ω—å –ª–µ–≥–µ–Ω–¥–∞! –ò–ª–∏ –Ω–µ—Ç? üòè –ö—Ç–æ —ç—Ç–æ?",
]
LEVEL_COMPLETE_PERFECT = [
    "–¢—ã –ø—Ä–æ—Å—Ç–æ —Ñ—É—Ç–±–æ–ª—å–Ω—ã–π –≥–µ–Ω–∏–π! üß†‚ú® –ò–¥–µ–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!",
    "–í–∞—É! 5 –∏–∑ 5! –¢—ã –∑–Ω–∞–µ—à—å –≤—Å–µ—Ö –Ω–∞–ø–µ—Ä–µ—á–µ—Ç! üêê",
]
LEVEL_COMPLETE_GOOD = [
    "–û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –ü–æ—á—Ç–∏ –∏–¥–µ–∞–ª—å–Ω–æ. üëç", "–•–æ—Ä–æ—à! –í–∏–¥–Ω–æ, —á—Ç–æ —Ç—ã –≤ —Ç–µ–º–µ. üí™",
]
LEVEL_COMPLETE_BAD = [
    "–ù–µ–ø–ª–æ—Ö–æ, –Ω–æ –µ—Å—Ç—å –∫—É–¥–∞ —Ä–∞—Å—Ç–∏! –í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –±—É–¥–µ—Ç –ª—É—á—à–µ. üòâ",
    "–ü–æ—Ö–æ–∂–µ, —Å–µ–≥–æ–¥–Ω—è –Ω–µ —Ç–≤–æ–π –¥–µ–Ω—å. –ù–æ –Ω–µ –≤–µ—à–∞–π –Ω–æ—Å! üèà",
]

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class SoloGuessStates(StatesGroup):
    in_game = State()
    waiting_for_choice = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_game_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞", callback_data="solo_hint"),
            InlineKeyboardButton(text="üè≥Ô∏è –°–¥–∞—Ç—å—Å—è", callback_data="solo_give_up"),
        ]
    ])

def get_game_keyboard_no_hint() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üè≥Ô∏è –°–¥–∞—Ç—å—Å—è", callback_data="solo_give_up"),
        ]
    ])

def get_level_complete_keyboard(next_level: int) -> ReplyKeyboardMarkup:
    buttons = []
    if str(next_level) in SOLO_PLAYERS_DATA:
        buttons.append(KeyboardButton(text=f"–£—Ä–æ–≤–µ–Ω—å {next_level}"))
    buttons.append(KeyboardButton(text="Footle"))
    return ReplyKeyboardMarkup(
        keyboard=[buttons],
        resize_keyboard=True,
        one_time_keyboard=True
    )
# –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
async def start_solo_game(
    message: types.Message,
    state: FSMContext,
    level: Optional[int] = None
):
    # –°–±—Ä–æ—Å FSM
    await state.clear()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Å –∫–∞–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å
    if level is None:
        saved = await get_solo_level(message.from_user.id)
        level = saved or 1

    if str(level) not in SOLO_PLAYERS_DATA:
        await message.answer(
            "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã –ø—Ä–æ—à—ë–ª –≤—Å–µ —É—Ä–æ–≤–Ω–∏!",
            reply_markup=get_solo_end_reply_keyboard()
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –ë–î
    await set_solo_level(message.from_user.id, level)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º FSM-–¥–∞–Ω–Ω—ã–µ
    await state.set_state(SoloGuessStates.in_game)
    await state.update_data(level=level, question_index=0, score=0)

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.answer(
        f"üèÜ <b>–£—Ä–æ–≤–µ–Ω—å {level}</b> –Ω–∞—á–∞–ª—Å—è! –£–≥–∞–¥–∞–π {TOTAL_QUESTIONS_PER_LEVEL} —Ñ—É—Ç–±–æ–ª–∏—Å—Ç–æ–≤.",
        reply_markup=ReplyKeyboardRemove(),
        parse_mode=ParseMode.HTML
    )

    # –ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    await ask_question(message, state)
async def ask_question(
    message: types.Message,
    state: FSMContext,
    feedback_text: str = ""
):
    data = await state.get_data()
    level = data["level"]
    idx   = data["question_index"]

    try:
        p = SOLO_PLAYERS_DATA[str(level)][idx]
        answers = [p["canonical_name"].lower()] + [a.lower() for a in p.get("aliases", [])]
        await state.update_data(
            correct_answers=answers,
            position=p.get("position"),
            nationality=p.get("nationality")
        )

        photo_path = PHOTOS_DIR / p["photo_file"]
        if not photo_path.exists():
            raise FileNotFoundError(f"Photo not found: {photo_path}")

        caption = (f"{feedback_text}\n\n" if feedback_text else "") + \
                  f"{random.choice(QUESTION_PHRASES)} ({idx+1}/{TOTAL_QUESTIONS_PER_LEVEL})"

        sent = await bot.send_photo(
            chat_id=message.chat.id,
            photo=FSInputFile(str(photo_path), filename=photo_path.name),
            caption=caption,
            reply_markup=get_game_keyboard(),
            parse_mode=ParseMode.HTML
        )
        await state.update_data(photo_message_id=sent.message_id)

    except Exception:
        logger.exception(f"ask_question error on level {level}, idx {idx}")
        await message.answer(
            "üòû –£–ø—Å, –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–æ–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ.",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.clear()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤
@router.message(StateFilter(SoloGuessStates.in_game))
async def handle_guess(message: types.Message, state: FSMContext):
    text = message.text or ""
    data = await state.get_data()
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ fuzzy —á–µ—Ä–µ–∑ utils.is_match
    correct = any(is_match(text, variant, FUZZY_THRESHOLD) for variant in data.get("correct_answers", []))
    # —Å–Ω–∏–º–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ñ–æ—Ç–æ
    if data.get("photo_message_id"):
        try:
            await bot.edit_message_reply_markup(
                chat_id=message.chat.id,
                message_id=data["photo_message_id"],
                reply_markup=None
            )
        except TelegramBadRequest:
            pass

    # –æ–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç –∏ —Å—Ç–∞—Ç—É—Å
    await state.update_data(
        previous_round_status = "correct" if correct else "incorrect",
        score = data.get("score", 0) + (1 if correct else 0)
    )
    await proceed_to_next_question(message, state)

# Hint & Give Up
@router.callback_query(F.data=="solo_hint", StateFilter(SoloGuessStates.in_game))
async def cb_hint(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    data = await state.get_data()
    pos_icon = {"–ù–∞–ø–∞–¥–∞—é—â–∏–π":"‚öΩ","–ó–∞—â–∏—Ç–Ω–∏–∫":"üõ°Ô∏è","–ü–æ–ª—É–∑–∞—â–∏—Ç–Ω–∏–∫":"üéØ","–í—Ä–∞—Ç–∞—Ä—å":"üß§"}.get(data.get("position"),"‚ÑπÔ∏è")
    flag = {
        "–ê—Ä–≥–µ–Ω—Ç–∏–Ω–∞":"üá¶üá∑","–ü–æ—Ä—Ç—É–≥–∞–ª–∏—è":"üáµüáπ","–ë—Ä–∞–∑–∏–ª–∏—è":"üáßüá∑","–§—Ä–∞–Ω—Ü–∏—è":"üá´üá∑",
    }.get(data.get("nationality"),"")
    await callback.message.answer(
        f"{random.choice(HINT_PHRASES)}\n\n{pos_icon} –ü–æ–∑–∏—Ü–∏—è: <b>{data.get('position')}</b>\n{flag} –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: <b>{data.get('nationality')}</b>"
    )
    # —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É ¬´–ü–æ–¥—Å–∫–∞–∑–∫–∞¬ª
    if data.get("photo_message_id"):
        try:
            await bot.edit_message_reply_markup(
                callback.message.chat.id,
                data["photo_message_id"],
                reply_markup=get_game_keyboard_no_hint()
            )
        except TelegramBadRequest:
            pass

@router.callback_query(F.data=="solo_give_up", StateFilter(SoloGuessStates.in_game))
async def cb_give_up(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    # —É–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –¥–∞–ª—å—à–µ
    data = await state.get_data()
    if data.get("photo_message_id"):
        try:
            await bot.edit_message_reply_markup(
                callback.message.chat.id,
                data["photo_message_id"],
                reply_markup=None
            )
        except TelegramBadRequest:
            pass
    await state.update_data(previous_round_status="gave_up")
    await proceed_to_next_question(callback.message, state)

# –õ–æ–≥–∏–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –º–µ–∂–¥—É –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
async def proceed_to_next_question(message: types.Message, state: FSMContext):
    data = await state.get_data()
    status = data.get("previous_round_status")
    feedback = {
        "correct": random.choice(CORRECT_ANSWER_PHRASES),
        "incorrect": random.choice(INCORRECT_ANSWER_PHRASES),
        "gave_up": random.choice(GIVE_UP_PHRASES),
    }.get(status, "")
    next_idx = data["question_index"] + 1

    # –µ—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–π–¥–µ–Ω
    if next_idx >= TOTAL_QUESTIONS_PER_LEVEL:
        if feedback:
            await message.answer(feedback)
        await asyncio.sleep(1)
        await show_level_complete_menu(message, state)
    else:
        await state.update_data(question_index=next_idx)
        await ask_question(message, state, feedback_text=feedback)
async def show_level_complete_menu(
    message: types.Message,
    state: FSMContext
):
    data = await state.get_data()
    lvl = data["level"]
    score = data["score"]
    next_lvl = lvl + 1

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º, –Ω–∞ –∫–∞–∫–æ–º —É—Ä–æ–≤–Ω–µ –∏–≥—Ä–æ–∫ —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑
    await set_solo_level(message.from_user.id, next_lvl)

    # –í—ã–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ-—Ñ–∏–¥–±–µ–∫
    if score == TOTAL_QUESTIONS_PER_LEVEL:
        summary = random.choice(LEVEL_COMPLETE_PERFECT)
    elif score >= TOTAL_QUESTIONS_PER_LEVEL * 0.6:
        summary = random.choice(LEVEL_COMPLETE_GOOD)
    else:
        summary = random.choice(LEVEL_COMPLETE_BAD)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —ç–∫—Ä–∞–Ω —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await message.answer(
        f"<b>–£—Ä–æ–≤–µ–Ω—å {lvl} –ø—Ä–æ–π–¥–µ–Ω!</b>\n"
        f"–¢–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: <b>{score}/{TOTAL_QUESTIONS_PER_LEVEL}</b>\n\n"
        f"<i>{summary}</i>\n\n–ß—Ç–æ –¥–∞–ª—å—à–µ?",
        reply_markup=get_level_complete_keyboard(next_lvl),
        parse_mode=ParseMode.HTML
    )

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –≥–¥–µ –∂–¥—ë–º –Ω–∞–∂–∞—Ç–∏—è ¬´–£—Ä–æ–≤–µ–Ω—å N¬ª –∏–ª–∏ ¬´Footle¬ª
    await state.set_state(SoloGuessStates.waiting_for_choice)

def get_solo_end_reply_keyboard() -> ReplyKeyboardMarkup:
    """
    –ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –≤—Å–µ —É—Ä–æ–≤–Ω–∏ –ø—Ä–æ–π–¥–µ–Ω—ã ‚Äî –¥–≤–µ –∫–Ω–æ–ø–∫–∏:
    üîÑ –ù–∞—á–∞—Ç—å Solo Guess –∑–∞–Ω–æ–≤–æ | üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ Footle
    """
    return ReplyKeyboardMarkup(
        keyboard=[[
            KeyboardButton(text="üîÑ –ù–∞—á–∞—Ç—å Solo Guess –∑–∞–Ω–æ–≤–æ"),
            KeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ Footle"),
        ]],
        resize_keyboard=True,
        one_time_keyboard=True
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –ø–æ—Å–ª–µ —É—Ä–æ–≤–Ω—è
@router.message(StateFilter(SoloGuessStates.waiting_for_choice), F.text.startswith("–£—Ä–æ–≤–µ–Ω—å"))
async def handle_next_level_button(message: types.Message, state: FSMContext):
    try:
        lvl = int(message.text.split()[-1])
        await start_solo_game(message, state, level=lvl)
    except:
        await message.answer("–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@router.message(StateFilter(SoloGuessStates.waiting_for_choice), F.text=="Footle")
async def handle_to_footle(message: types.Message, state: FSMContext):
    await state.clear()
    from modules.footle import cmd_footle
    await cmd_footle(message)

@router.message(lambda msg: msg.text == "üîÑ –ù–∞—á–∞—Ç—å Solo Guess –∑–∞–Ω–æ–≤–æ")
async def cmd_restart_solo(message: types.Message, state: FSMContext):
    await message.answer(
        "üîÑ –ó–∞–ø—É—Å–∫–∞—é Solo Guess –∑–∞–Ω–æ–≤–æ —Å 1 —É—Ä–æ–≤–Ω—è‚Ä¶",
        reply_markup=ReplyKeyboardRemove()
    )
    await start_solo_game(message, state, level=1)

@router.message(lambda msg: msg.text == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ Footle")
async def cmd_back_to_footle(message: types.Message, state: FSMContext):
    await message.answer(
        "üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ Footle‚Ä¶",
        reply_markup=ReplyKeyboardRemove()
    )
    from modules.footle import cmd_footle
    await cmd_footle(message)

# modules/duel.py

import asyncio
import json
import random
import time
import logging
from typing import Dict, Any, Optional
from thefuzz import fuzz
import aiosqlite

from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.types import FSInputFile
from aiogram.exceptions import TelegramBadRequest
from bot import bot
from config import DB_PATH, DUEL_WORDS_JSON, BASE_DIR

router = Router()
logger = logging.getLogger(__name__)

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ---
DUEL_TOTAL_ROUNDS = 5
DUEL_TIMEOUT = 15
POINTS_BASE = 10

duel_timers: Dict[int, asyncio.Task] = {}
duel_sequences: Dict[str, list[dict]] = {}
DUEL_WORDS: list[dict] = []


# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---

async def init_duel_db() -> None:
    """–°–æ–∑–¥–∞—ë—Ç/–æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –¥—É—ç–ª–µ–π, –¥–æ–±–∞–≤–ª—è—è –Ω–æ–≤—ã–µ –ø–æ–ª—è."""
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("""
            CREATE TABLE IF NOT EXISTS duel_games (
                id TEXT PRIMARY KEY, chat_id INTEGER, player1 INTEGER, player2 INTEGER,
                round INTEGER, total_rounds INTEGER, current_word TEXT, current_photo TEXT,
                round_start_time INTEGER, score1 INTEGER DEFAULT 0, score2 INTEGER DEFAULT 0,
                rounds_won1 INTEGER DEFAULT 0, rounds_won2 INTEGER DEFAULT 0,
                status TEXT, winner INTEGER, created_at INTEGER, ended_at INTEGER
            );
        """)
        await db.execute("""
            CREATE TABLE IF NOT EXISTS duel_leaderboard (
                user_id INTEGER PRIMARY KEY, wins INTEGER DEFAULT 0,
                losses INTEGER DEFAULT 0, draws INTEGER DEFAULT 0,
                win_streak INTEGER DEFAULT 0
            );
        """)
        try:
            await db.execute("ALTER TABLE duel_games ADD COLUMN rounds_won1 INTEGER DEFAULT 0;")
            await db.execute("ALTER TABLE duel_games ADD COLUMN rounds_won2 INTEGER DEFAULT 0;")
        except aiosqlite.OperationalError: pass
        try:
            await db.execute("ALTER TABLE duel_leaderboard ADD COLUMN win_streak INTEGER DEFAULT 0;")
        except aiosqlite.OperationalError: pass
        await db.commit()


@router.startup()
async def on_startup_duel():
    global DUEL_WORDS
    await init_duel_db()
    try:
        with open(DUEL_WORDS_JSON, encoding="utf-8") as f:
            levels_data = json.load(f)
        flat_list = [player for level_players in levels_data.values() for player in level_players]
        DUEL_WORDS = flat_list
        if DUEL_WORDS:
            logger.info(f"–î—É—ç–ª–∏: –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(DUEL_WORDS)} –∏–≥—Ä–æ–∫–æ–≤.")
        else:
            logger.error(f"–î—É—ç–ª–∏: –î–∞–Ω–Ω—ã–µ –∏–∑ {DUEL_WORDS_JSON} –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –Ω–æ —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –ø—É—Å—Ç.")
    except Exception as e:
        logger.error(f"–î—É—ç–ª–∏: –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ {DUEL_WORDS_JSON}: {e}")


# --- –£—Ç–∏–ª–∏—Ç—ã ---

def mention(user_id: int, name: str) -> str:
    return f'<a href="tg://user?id={user_id}">{name}</a>'


def get_duel_invite_keyboard(player1_id: int, player2_id: int) -> types.InlineKeyboardMarkup:
    accept_callback = f"duel_accept:{player1_id}:{player2_id}"
    decline_callback = f"duel_decline:{player1_id}:{player2_id}"
    buttons = [
        [
            types.InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=accept_callback),
            types.InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=decline_callback)
        ]
    ]
    return types.InlineKeyboardMarkup(inline_keyboard=buttons)


async def schedule_round_timeout(chat_id: int, duel_id: str, current_round: int):
    async def _timeout_task():
        await asyncio.sleep(DUEL_TIMEOUT)
        if duel_timers.get(chat_id) is task:
            await on_round_timeout(chat_id, duel_id, current_round)

    task = asyncio.create_task(_timeout_task())
    duel_timers[chat_id] = task


async def cancel_round_timeout(chat_id: int):
    task = duel_timers.pop(chat_id, None)
    if task: task.cancel()


# --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥—É—ç–ª–∏ ---

async def start_duel_round(duel_id: str, chat_id: int, current_round: int):
    player_sequence = duel_sequences.get(duel_id, [])
    if not player_sequence or len(player_sequence) < current_round:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –¥—É—ç–ª–∏ {duel_id}: –Ω–µ—Ç –∏–≥—Ä–æ–∫–∞ –¥–ª—è —Ä–∞—É–Ω–¥–∞ {current_round}")
        await bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –î—É—ç–ª—å –ø—Ä–µ—Ä–≤–∞–Ω–∞.")
        return

    player_data = player_sequence[current_round - 1]
    word, photo_file = player_data["canonical_name"].lower(), player_data["photo_file"]
    now_ts = int(time.time())

    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            "UPDATE duel_games SET round=?, current_word=?, current_photo=?, round_start_time=? WHERE id=?",
            (current_round, word, photo_file, now_ts, duel_id))
        await db.commit()

    caption = f"üèÅ <b>–†–∞—É–Ω–¥ {current_round}/{DUEL_TOTAL_ROUNDS}</b> ‚Äî —É–≥–∞–¥–∞–π—Ç–µ —Ñ—É—Ç–±–æ–ª–∏—Å—Ç–∞!"
    photo_path = BASE_DIR / "footphoto" / photo_file

    if photo_path.exists():
        await bot.send_photo(chat_id, FSInputFile(photo_path), caption=caption, parse_mode=ParseMode.HTML)
    else:
        logger.warning(f"–§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –¥—É—ç–ª–∏: {photo_path}")
        await bot.send_message(chat_id, f"{caption}\n(–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ)", parse_mode=ParseMode.HTML)

    await cancel_round_timeout(chat_id)
    await schedule_round_timeout(chat_id, duel_id, current_round)


async def on_round_timeout(chat_id: int, duel_id: str, timed_out_round: int):
    async with aiosqlite.connect(DB_PATH) as db:
        db.row_factory = aiosqlite.Row
        cursor = await db.execute("SELECT * FROM duel_games WHERE id=? AND status='active'", (duel_id,))
        duel = await cursor.fetchone()
    if not duel or duel["round"] != timed_out_round: return
    duel_timers.pop(chat_id, None)
    await bot.send_message(chat_id,
                           f"‚è± <b>–†–∞—É–Ω–¥ {timed_out_round}:</b> –Ω–∏–∫—Ç–æ –Ω–µ —É—Å–ø–µ–ª –∑–∞ {DUEL_TIMEOUT} —Å–µ–∫.\n–§–∞–º–∏–ª–∏—è: <b>{duel['current_word'].upper()}</b>",
                           parse_mode=ParseMode.HTML)
    await advance_round_or_finish(duel)


async def advance_round_or_finish(duel: aiosqlite.Row):
    await asyncio.sleep(2)
    next_round = duel['round'] + 1
    if next_round > duel['total_rounds']:
        await finalize_duel(duel)
    else:
        await bot.send_message(duel['chat_id'], f"üîú –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Ä–∞—É–Ω–¥—É {next_round}/{duel['total_rounds']}‚Ä¶")
        await asyncio.sleep(2)
        await start_duel_round(duel['id'], duel['chat_id'], next_round)


async def finalize_duel(duel: aiosqlite.Row):
    """üî• –£–õ–£–ß–®–ï–ù–û: –ó–∞–≤–µ—Ä—à–∞–µ—Ç –¥—É—ç–ª—å —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ —á–µ—Ä–µ–∑ ON CONFLICT."""
    p1, p2, s1, s2 = duel['player1'], duel['player2'], duel['score1'], duel['score2']
    r_won1, r_won2 = duel['rounds_won1'], duel['rounds_won2']
    winner, loser = None, None

    async with aiosqlite.connect(DB_PATH) as db:
        if s1 > s2:
            winner, loser = p1, p2
            # –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: +1 –ø–æ–±–µ–¥–∞, +1 –∫ —Å–µ—Ä–∏–∏
            await db.execute("""
                INSERT INTO duel_leaderboard (user_id, wins, win_streak) VALUES (?, 1, 1)
                ON CONFLICT(user_id) DO UPDATE SET wins = wins + 1, win_streak = win_streak + 1;
            """, (winner,))
            # –ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π: +1 –ø–æ—Ä–∞–∂–µ–Ω–∏–µ, —Å–±—Ä–æ—Å —Å–µ—Ä–∏–∏
            await db.execute("""
                INSERT INTO duel_leaderboard (user_id, losses, win_streak) VALUES (?, 1, 0)
                ON CONFLICT(user_id) DO UPDATE SET losses = losses + 1, win_streak = 0;
            """, (loser,))
        elif s2 > s1:
            winner, loser = p2, p1
            # –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: +1 –ø–æ–±–µ–¥–∞, +1 –∫ —Å–µ—Ä–∏–∏
            await db.execute("""
                INSERT INTO duel_leaderboard (user_id, wins, win_streak) VALUES (?, 1, 1)
                ON CONFLICT(user_id) DO UPDATE SET wins = wins + 1, win_streak = win_streak + 1;
            """, (winner,))
            # –ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π: +1 –ø–æ—Ä–∞–∂–µ–Ω–∏–µ, —Å–±—Ä–æ—Å —Å–µ—Ä–∏–∏
            await db.execute("""
                INSERT INTO duel_leaderboard (user_id, losses, win_streak) VALUES (?, 1, 0)
                ON CONFLICT(user_id) DO UPDATE SET losses = losses + 1, win_streak = 0;
            """, (loser,))
        else:  # –ù–∏—á—å—è
            # –û–±–∞ –∏–≥—Ä–æ–∫–∞: +1 –Ω–∏—á—å—è, —Å–±—Ä–æ—Å —Å–µ—Ä–∏–∏
            for player_id in (p1, p2):
                await db.execute("""
                    INSERT INTO duel_leaderboard (user_id, draws, win_streak) VALUES (?, 1, 0)
                    ON CONFLICT(user_id) DO UPDATE SET draws = draws + 1, win_streak = 0;
                """, (player_id,))

        win_streak = 0
        if winner:
            cursor = await db.execute("SELECT win_streak FROM duel_leaderboard WHERE user_id = ?", (winner,))
            streak_row = await cursor.fetchone()
            if streak_row: win_streak = streak_row[0]

        await db.execute("UPDATE duel_games SET status='finished', winner=?, ended_at=? WHERE id=?",
                         (winner, int(time.time()), duel['id']))
        await db.commit()

    p1_user, p2_user = await bot.get_chat(p1), await bot.get_chat(p2)
    text = (f"üéâ <b>–î—É—ç–ª—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
            f"{mention(p1, p1_user.full_name)} (–≤—ã–∏–≥—Ä–∞–ª {r_won1} —Ä–∞—É–Ω–¥–æ–≤) ‚Äî <b>{s1}</b> –æ—á–∫–æ–≤\n"
            f"{mention(p2, p2_user.full_name)} (–≤—ã–∏–≥—Ä–∞–ª {r_won2} —Ä–∞—É–Ω–¥–æ–≤) ‚Äî <b>{s2}</b> –æ—á–∫–æ–≤\n\n")

    if winner:
        winner_user = await bot.get_chat(winner)
        text += f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {mention(winner, winner_user.full_name)}"
        if win_streak >= 2:
            text += f"\nüî• <b>–°–µ—Ä–∏—è –ø–æ–±–µ–¥: {win_streak}!</b>"
    else:
        text += "ü§ù <b>–ù–∏—á—å—è!</b>"

    rematch_keyboard = None
    if winner and loser: # –ö–Ω–æ–ø–∫–∞ —Ä–µ–≤–∞–Ω—à–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—å –∏ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π
        rematch_callback = f"duel_rematch:{winner}:{loser}"
        rematch_keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="üîÑ –†–µ–≤–∞–Ω—à!", callback_data=rematch_callback)]
        ])

    await bot.send_message(duel['chat_id'], text, parse_mode=ParseMode.HTML, reply_markup=rematch_keyboard)
    await cancel_round_timeout(duel['chat_id'])
    duel_sequences.pop(duel['id'], None)


@router.message(Command("duel"))
async def cmd_duel_start(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –¥—É—ç–ª—å –ø–æ —Ä–µ–ø–ª–∞—é –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    if message.chat.type not in ("group", "supergroup"):
        return await message.answer("‚ùå –î—É—ç–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not message.reply_to_message:
        return await message.answer("‚ùå –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –¥—É—ç–ª—å, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /duel.")

    # üî• –ì–õ–ê–í–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ù–ê –ê–ù–û–ù–ò–ú–ù–û–°–¢–¨!
    # –ï—Å–ª–∏ —É –æ—Ç–≤–µ—á–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ—Ç –∞–≤—Ç–æ—Ä–∞ (from_user is None),
    # –∑–Ω–∞—á–∏—Ç, —ç—Ç–æ –∞–Ω–æ–Ω–∏–º–Ω—ã–π –∞–¥–º–∏–Ω, –∫–∞–Ω–∞–ª –∏–ª–∏ —Å–ª—É–∂–µ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    if not message.reply_to_message.from_user:
        return await message.answer("‚ùå –ù–µ–ª—å–∑—è –≤—ã–∑–≤–∞—Ç—å –Ω–∞ –¥—É—ç–ª—å –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞, –∫–∞–Ω–∞–ª –∏–ª–∏ —Å–ª—É–∂–µ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")

    # –ï—Å–ª–∏ –º—ã –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –≤—ã—à–µ, –∑–Ω–∞—á–∏—Ç, –∞–≤—Ç–æ—Ä —Ç–æ—á–Ω–æ –µ—Å—Ç—å.
    initiator = message.from_user
    opponent = message.reply_to_message.from_user

    # –¢–µ–ø–µ—Ä—å —Ç–≤–æ–∏ —Å—Ç–∞—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ
    if initiator.id == opponent.id:
        return await message.answer("‚ùå –ù–µ–ª—å–∑—è –¥—É—ç–ª–∏—Ç—å—Å—è —Å —Å–∞–º–∏–º —Å–æ–±–æ–π.")

    if opponent.is_bot:
        return await message.answer("‚ùå –ù–µ–ª—å–∑—è –¥—É—ç–ª–∏—Ç—å—Å—è —Å –±–æ—Ç–æ–º.")

    if not DUEL_WORDS:
        return await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–≥—Ä–æ–∫–∏ –¥–ª—è –¥—É—ç–ª–∏. –°–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–∫—Ç–∏–≤–Ω—É—é –¥—É—ç–ª—å –≤ —á–∞—Ç–µ
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute("SELECT 1 FROM duel_games WHERE chat_id=? AND status='active'", (message.chat.id,))
        if await cursor.fetchone():
            return await message.answer("‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ —É–∂–µ –∏–¥—ë—Ç –¥—É—ç–ª—å. –û—Ç–º–µ–Ω–∏—Ç–µ –µ—ë —á–µ—Ä–µ–∑ /cancel_duel.")

    # --- –í–µ—Å—å –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ---
    keyboard = get_duel_invite_keyboard(initiator.id, opponent.id)
    invite_text = (
        f"‚öîÔ∏è {mention(opponent.id, opponent.full_name)}, –∏–≥—Ä–æ–∫ {mention(initiator.id, initiator.full_name)} "
        f"–≤—ã–∑—ã–≤–∞–µ—Ç —Ç–µ–±—è –Ω–∞ –¥—É—ç–ª—å ¬´–£–≥–∞–¥–∞–π —Ñ—É—Ç–±–æ–ª–∏—Å—Ç–∞¬ª!\n\n"
        f"–ü—Ä–∏–Ω–∏–º–∞–µ—à—å –≤—ã–∑–æ–≤?"
    )
    sent_message = await message.answer(invite_text, reply_markup=keyboard, parse_mode=ParseMode.HTML)

    async def auto_decline_task():
        await asyncio.sleep(60)
        try:
            await bot.edit_message_text(
                chat_id=sent_message.chat.id,
                message_id=sent_message.message_id,
                text=f"–í—ã–∑–æ–≤ –Ω–∞ –¥—É—ç–ª—å –æ—Ç {mention(initiator.id, initiator.full_name)} "
                     f"–¥–ª—è {mention(opponent.id, opponent.full_name)} –∏—Å—Ç—ë–∫.",
                reply_markup=None,
                parse_mode=ParseMode.HTML
            )
        except TelegramBadRequest:
            pass

    asyncio.create_task(auto_decline_task())


@router.message(Command("cancel_duel"))
async def cmd_cancel_duel(message: types.Message):
    async with aiosqlite.connect(DB_PATH) as db:
        db.row_factory = aiosqlite.Row
        cursor = await db.execute("SELECT * FROM duel_games WHERE chat_id=? AND status='active'", (message.chat.id,))
        duel = await cursor.fetchone()
    if not duel: return await message.answer("–í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥—É—ç–ª–µ–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
    if message.from_user.id not in (duel["player1"], duel["player2"]): return await message.answer("–û—Ç–º–µ–Ω–∏—Ç—å –¥—É—ç–ª—å –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
    await cancel_round_timeout(message.chat.id)
    duel_sequences.pop(duel["id"], None)
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("UPDATE duel_games SET status='canceled', ended_at=? WHERE id=?", (int(time.time()), duel["id"]))
        await db.commit()
    await message.answer(f"‚ùå {mention(message.from_user.id, message.from_user.full_name)} –æ—Ç–º–µ–Ω–∏–ª(–∞) –¥—É—ç–ª—å.", parse_mode=ParseMode.HTML)


@router.message(Command("duel_leaderboard"))
async def cmd_duel_leaderboard(message: types.Message):
    lines = [
        "üèÜ <b>–¢–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤: ¬´–£–≥–∞–¥–∞–π —Ñ—É—Ç–±–æ–ª–∏—Å—Ç–∞¬ª</b>",
        "<i>(–ü–æ–±–µ–¥—ã - –ü–æ—Ä–∞–∂–µ–Ω–∏—è - –ù–∏—á—å–∏)</i>\n"
    ]
    try:
        async with aiosqlite.connect(DB_PATH) as db:
            db.row_factory = aiosqlite.Row
            cursor = await db.execute(
                "SELECT * FROM duel_leaderboard ORDER BY wins DESC, win_streak DESC, losses ASC LIMIT 10"
            )
            rows = await cursor.fetchall()

        if not rows:
            await message.answer("üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ ¬´–£–≥–∞–¥–∞–π —Ñ—É—Ç–±–æ–ª–∏—Å—Ç–∞¬ª –ø–æ–∫–∞ –ø—É—Å—Ç–∞.")
            return

        # –°–ª–æ–≤–∞—Ä—å —Å –º–µ–¥–∞–ª—è–º–∏
        medals = {1: "ü•á", 2: "ü•à", 3: "ü•â"}

        for i, r in enumerate(rows, 1):
            try:
                user = await bot.get_chat(r["user_id"])
                name_mention = mention(user.id, user.full_name)
            except TelegramBadRequest:
                name_mention = f"–ò–≥—Ä–æ–∫ <code>{r['user_id']}</code>"

            stats_line = f"<b>{r['wins']}-{r['losses']}-{r['draws']}</b>"

            win_streak = r['win_streak'] if 'win_streak' in r.keys() else 0
            streak = f" üî•{win_streak}" if win_streak >= 2 else ""

            # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨ ---
            # –ü–æ–ª—É—á–∞–µ–º –º–µ–¥–∞–ª—å –∏–ª–∏ –Ω–æ–º–µ—Ä —Å —Ç–æ—á–∫–æ–π
            place = medals.get(i, f"{i}.")

            lines.append(f"{place} {name_mention} ‚Äî {stats_line}{streak}")

        await message.answer("\n".join(lines), parse_mode="HTML", disable_web_page_preview=True)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ duel_leaderboard: {e}", exc_info=True)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤.")


@router.callback_query(F.data.startswith("duel_accept:"))
async def handle_duel_accept(callback: types.CallbackQuery):
    _, p1_id, p2_id = callback.data.split(":")
    player1_id, player2_id = int(p1_id), int(p2_id)
    if callback.from_user.id != player2_id:
        return await callback.answer("–≠—Ç–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ –¥–ª—è –≤–∞—Å!", show_alert=True)
    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.answer("–í—ã–∑–æ–≤ –ø—Ä–∏–Ω—è—Ç!")

    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute("SELECT 1 FROM duel_games WHERE chat_id=? AND status='active'", (callback.message.chat.id,))
        if await cursor.fetchone():
            return await callback.message.answer("–ü–æ–∫–∞ –≤—ã –¥—É–º–∞–ª–∏, –≤ —á–∞—Ç–µ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å –¥—Ä—É–≥–∞—è –¥—É—ç–ª—å.")
    initiator, opponent = await bot.get_chat(player1_id), await bot.get_chat(player2_id)
    ts = int(time.time())
    duel_id = f"{callback.message.chat.id}_{player1_id}_{player2_id}_{ts}"
    duel_sequences[duel_id] = random.sample(DUEL_WORDS, k=DUEL_TOTAL_ROUNDS)
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("INSERT INTO duel_games (id, chat_id, player1, player2, round, total_rounds, status, created_at) VALUES (?, ?, ?, ?, 1, ?, 'active', ?)",
                         (duel_id, callback.message.chat.id, player1_id, player2_id, DUEL_TOTAL_ROUNDS, ts))
        await db.commit()
    await callback.message.answer(
        f"üÜö <b>–î—É—ç–ª—å –ø—Ä–∏–Ω—è—Ç–∞!</b>\n{mention(initiator.id, initiator.full_name)} vs {mention(opponent.id, opponent.full_name)}\n"
        f"–†–∞—É–Ω–¥ 1/{DUEL_TOTAL_ROUNDS} –Ω–∞—á–Ω—ë—Ç—Å—è —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã‚Ä¶",
        parse_mode=ParseMode.HTML)
    await asyncio.sleep(3)
    await start_duel_round(duel_id, callback.message.chat.id, 1)


@router.callback_query(F.data.startswith("duel_decline:"))
async def handle_duel_decline(callback: types.CallbackQuery):
    _, p1_id, p2_id = callback.data.split(":")
    player1_id, player2_id = int(p1_id), int(p2_id)
    if callback.from_user.id not in (player1_id, player2_id):
        return await callback.answer("–≠—Ç–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ –¥–ª—è –≤–∞—Å!", show_alert=True)
    initiator, opponent = await bot.get_chat(player1_id), await bot.get_chat(player2_id)
    declined_by_name = mention(callback.from_user.id, callback.from_user.full_name)
    await callback.message.edit_text(
        f"üö´ {declined_by_name} –æ—Ç–∫–ª–æ–Ω–∏–ª(–∞) –≤—ã–∑–æ–≤ –Ω–∞ –¥—É—ç–ª—å –æ—Ç {mention(initiator.id, initiator.full_name)}.",
        parse_mode=ParseMode.HTML)
    await callback.answer("–í—ã–∑–æ–≤ –æ—Ç–∫–ª–æ–Ω–µ–Ω.")


@router.message(F.text & ~F.text.startswith('/'))
async def on_duel_guess(message: types.Message):
    """
    ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ø—ã—Ç–∫—É —É–≥–∞–¥–∞—Ç—å —Ñ–∞–º–∏–ª–∏—é –≤ –∞–∫—Ç–∏–≤–Ω–æ–π –¥—É—ç–ª–∏.
    - –†–µ–≥–∏—Å—Ç—Ä –≤–≤–æ–¥–∞ –ù–ï –ò–ú–ï–ï–¢ –ó–ù–ê–ß–ï–ù–ò–Ø, —Ç.–∫. –∏ –≤–≤–æ–¥, –∏ –æ—Ç–≤–µ—Ç—ã –ø—Ä–∏–≤–æ–¥—è—Ç—Å—è –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É.
    - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç–≤–µ—Ç –∫–∞–∫ –ø–æ —Ä—É—Å—Å–∫–∏–º –ø—Å–µ–≤–¥–æ–Ω–∏–º–∞–º (aliases), —Ç–∞–∫ –∏ –ø–æ –æ—Å–Ω–æ–≤–Ω–æ–º—É –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É –∏–º–µ–Ω–∏ (canonical_name).
    - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≥–∏–±–∫–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø–æ—Ä–æ–≥–æ–º 75%.
    """
    if message.chat.type not in ("group", "supergroup"): return

    async with aiosqlite.connect(DB_PATH) as db:
        db.row_factory = aiosqlite.Row
        cursor = await db.execute("SELECT * FROM duel_games WHERE chat_id=? AND status='active'", (message.chat.id,))
        duel = await cursor.fetchone()

    if not duel: return

    user_id = message.from_user.id
    if user_id not in (duel["player1"], duel["player2"]): return
    if not duel["current_word"]: return

    target_player_data = next((p for p in DUEL_WORDS if p['canonical_name'].lower() == duel['current_word']), None)
    if not target_player_data:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–ª–æ–≤–∞ {duel['current_word']} –≤ DUEL_WORDS.")
        return

    # 1. –ü—Ä–∏–≤–æ–¥–∏–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É. –ö–ê–ü–° –£–ë–ò–†–ê–ï–¢–°–Ø –ó–î–ï–°–¨.
    user_guess = message.text.strip().lower()

    # 2. –°–æ–±–∏—Ä–∞–µ–º –í–°–ï –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –≤ –æ–¥–∏–Ω —Å–ø–∏—Å–æ–∫
    russian_aliases = target_player_data.get('aliases', [])
    canonical_name = target_player_data.get('canonical_name', '')
    all_possible_answers = russian_aliases + ([canonical_name] if canonical_name else [])

    if not all_possible_answers:
        logger.warning(f"–£ –∏–≥—Ä–æ–∫–∞ {duel['current_word']} –Ω–µ—Ç –Ω–∏ canonical_name, –Ω–∏ aliases. –ï–≥–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–≥–∞–¥–∞—Ç—å.")
        return

    # 3. –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ, –ø—Ä–∏–≤–æ–¥—è –ö–ê–ñ–î–´–ô –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —Ç–æ–∂–µ –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    is_correct = False
    for answer in all_possible_answers:
        # –ü—Ä–∏–≤–æ–¥–∏–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        answer_lower = answer.lower()
        ratio = fuzz.ratio(user_guess, answer_lower)

        # üî• –î–æ–±–∞–≤–∏–ª –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏. –¢–µ–ø–µ—Ä—å –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—É–¥–µ—Ç –≤–∏–¥–Ω–æ, —á—Ç–æ —Å —á–µ–º —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç—Å—è.
        logger.debug(f"–î—É—ç–ª—å: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ '{user_guess}' —Å '{answer_lower}'. –°—Ö–æ–¥—Å—Ç–≤–æ: {ratio}%")

        if ratio >= 75:
            is_correct = True
            break  # –ù–∞—à–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞

    if is_correct:
        await cancel_round_timeout(message.chat.id)

        elapsed = int(time.time()) - duel["round_start_time"]
        pts = max(1, POINTS_BASE - elapsed)

        s1, s2 = duel["score1"], duel["score2"]
        r_won1, r_won2 = duel["rounds_won1"], duel["rounds_won2"]

        if user_id == duel["player1"]:
            s1 += pts
            r_won1 += 1
        else:
            s2 += pts
            r_won2 += 1

        async with aiosqlite.connect(DB_PATH) as db:
            await db.execute("UPDATE duel_games SET score1=?, score2=?, rounds_won1=?, rounds_won2=? WHERE id=?",
                             (s1, s2, r_won1, r_won2, duel["id"]))
            await db.commit()

        await message.answer(
            f"‚úÖ <b>–†–∞—É–Ω–¥ {duel['round']}:</b> {mention(user_id, message.from_user.full_name)} —É–≥–∞–¥–∞–ª(–∞) –∑–∞ {elapsed} —Å–µ–∫ ‚Äî +{pts} –æ—á–∫–æ–≤!",
            parse_mode=ParseMode.HTML)

        # –ü–µ—Ä–µ–∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥—É—ç–ª—å –∏–∑ –ë–î, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –æ—á–∫–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏
        async with aiosqlite.connect(DB_PATH) as db:
            db.row_factory = aiosqlite.Row
            cursor = await db.execute("SELECT * FROM duel_games WHERE id=?", (duel['id'],))
            updated_duel = await cursor.fetchone()

        if updated_duel:
            await advance_round_or_finish(updated_duel)


@router.callback_query(F.data.startswith("duel_rematch:"))
async def handle_duel_rematch(callback: types.CallbackQuery):
    _, p1_id, p2_id = callback.data.split(":")
    winner_id, loser_id = int(p1_id), int(p2_id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: —Ç–æ–ª—å–∫–æ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π –º–æ–∂–µ—Ç –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É "–†–µ–≤–∞–Ω—à"
    if callback.from_user.id != loser_id:
        return await callback.answer("–¢–æ–ª—å–∫–æ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π –º–æ–∂–µ—Ç –ø—Ä–∏–Ω—è—Ç—å —Ä–µ–≤–∞–Ω—à!", show_alert=True)

    # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É "–†–µ–≤–∞–Ω—à" —Å–æ —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await callback.message.edit_reply_markup(reply_markup=None)

    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    # `rematch_initiator` - —ç—Ç–æ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—Ç —Ä–µ–≤–∞–Ω—à
    # `rematch_opponent` - —ç—Ç–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–µ–¥–ª–∞–≥–∞—é—Ç —Ä–µ–≤–∞–Ω—à
    rematch_initiator = await bot.get_chat(loser_id)
    rematch_opponent = await bot.get_chat(winner_id)

    # --- –ì–õ–ê–í–ù–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨ ---
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –≥–¥–µ –ò–ù–ò–¶–ò–ê–¢–û–†–û–ú (player1) —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –ü–†–û–ò–ì–†–ê–í–®–ò–ô,
    # –∞ –û–ü–ü–û–ù–ï–ù–¢–û–ú (player2) - –ü–û–ë–ï–î–ò–¢–ï–õ–¨.
    keyboard = get_duel_invite_keyboard(rematch_initiator.id, rematch_opponent.id)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    invite_text = (
        f"‚öîÔ∏è {mention(rematch_opponent.id, rematch_opponent.full_name)}, "
        f"–ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π {mention(rematch_initiator.id, rematch_initiator.full_name)} –∂–∞–∂–¥–µ—Ç —Ä–µ–≤–∞–Ω—à–∞ –∏ —Å–Ω–æ–≤–∞ –≤—ã–∑—ã–≤–∞–µ—Ç —Ç–µ–±—è –Ω–∞ –¥—É—ç–ª—å!"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ–º
    await callback.message.answer(invite_text, reply_markup=keyboard, parse_mode=ParseMode.HTML)
    await callback.answer("–ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≤–∞–Ω—à –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")